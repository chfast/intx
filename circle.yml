version: 2.1

executors:
  linux-gcc-latest:
    docker:
      - image: ethereum/cpp-build-env:18-gcc-12
  linux-clang-latest:
    docker:
      - image: ethereum/cpp-build-env:18-clang-14
  macos:
    macos:
      xcode: 14.2.0

commands:
  install_deps:
    description: "Install dependencies"
    steps:
      - run:
          name: "Install dependencies"
          command: |
            sudo apt -q update
            sudo apt install -qy libgmp-dev

  install_powerpc64:
    steps:
      - run:
          name: "Install powerpc64 toolchain"
          command: |
            sudo apt -q update
            sudo apt -qy install g++-powerpc64-linux-gnu qemu-user-static

  check_code_format:
    steps:
      - run:
          name: "Check code format"
          command: |
            clang-format --version
            git ls-files '*.hpp' '*.cpp' '*.h' '*.c' | xargs clang-format -i
            git diff --color --exit-code

  build_and_test:
    description: "Build & Test"
    steps:
      - run:
          name: "Environment"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version
      - checkout
      - run:
          name: "Configure"
          command: cmake -B ~/build -DCMAKE_INSTALL_PREFIX=~/install -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_OPTIONS
      - run:
          name: "Build"
          command: |
            cmake --build ~/build --parallel
            cmake --build ~/build --target package
      - run:
          name: "Test"
          working_directory: ~/build
          command: |
            ctest -j4 --output-on-failure --schedule-random -R ${TESTS_FILTER:-'.*'} -E ${TESTS_EXCLUDE}
      - run:
          name: "Install"
          command: cmake --build ~/build --target install

  benchmark:
    description: "Benchmark"
    steps:
      - run:
          name: "Benchmark"
          working_directory: ~/build
          command: test/intx-bench --benchmark_min_time=0.01

  collect_coverage_gcc:
    description: "Collect coverage data (GCC)"
    steps:
      - run:
          name: "Collect coverage data (GCC)"
          working_directory: ~/build
          command: |
            lcov --capture --directory . --output-file coverage.lcov --exclude='/usr/include/*' --exclude="$HOME/.hunter/*" --exclude="$PWD/_deps/*"
            lcov --zerocounters --directory .
            rm -rf coverage
            genhtml coverage.lcov --output-directory coverage --title $CIRCLE_PROJECT_REPONAME
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage

  upload_coverage:
    description: "Upload coverage data"
    parameters:
      flags:
        type: string
    steps:
      - run:
          name: "Upgrade codecov"
          command: sudo pip3 install --upgrade --quiet --no-cache-dir codecov
      - run:
          name: "Upload to Codecov"
          command: |
            # Convert to relative paths
            sed -i 's|$(pwd)/||' ~/build/coverage.lcov

            counter=1
            until codecov --flags <<parameters.flags>> --required --file ~/build/coverage.lcov -X gcov || [ $counter = 5 ]; do
              counter=$((counter+1))
              sleep 1
              echo "Try #$counter..."
            done


jobs:

  lint:
    docker:
      # TODO: clang-format-14 has a regression. Jump to 15 when available.
      - image: ethereum/cpp-build-env:17-clang-13
    steps:
      - checkout
      - check_code_format

  build-minimal:
    executor: linux-gcc-latest
    steps:
      - checkout
      - run:
          name: "Build package"
          command: |
            cmake -B ~/build -DINTX_TESTING=OFF
            cmake --build ~/build --target package
      - run:
          name: "Inspect package"
          command: tar tvf ~/build/intx*.tar.gz

  linux-gcc-coverage:
    environment:
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests
      TESTS_EXCLUDE: random
    executor: linux-gcc-latest
    steps:
      - install_deps
      - build_and_test
      - collect_coverage_gcc
      - upload_coverage:
          flags: gcc

  linux-clang-coverage:
    environment:
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests
      TESTS_EXCLUDE: random
    executor: linux-clang-latest
    steps:
      - install_deps
      - build_and_test
      - run:
          name: "Coverage"
          working_directory: ~/build
          command: |
            mkdir coverage
            find -name '*.profraw'
            llvm-profdata merge *.profraw -o intx.profdata
            llvm-cov report -use-color -instr-profile intx.profdata -Xdemangler llvm-cxxfilt test/intx-unittests
            llvm-cov report -instr-profile intx.profdata -Xdemangler llvm-cxxfilt test/intx-unittests > coverage/report.txt
            llvm-cov show -format=html -instr-profile intx.profdata -Xdemangler llvm-cxxfilt -region-coverage-lt=100 test/intx-unittests > coverage/missing.html
            llvm-cov show -format=html -instr-profile intx.profdata -Xdemangler llvm-cxxfilt test/intx-unittests > coverage/full.html
            llvm-cov export -instr-profile intx.profdata -format=lcov test/intx-unittests > coverage.lcov
            genhtml coverage.lcov -o coverage -t $CIRCLE_PROJECT_REPONAME
      - store_artifacts:
          path: ~/build/coverage
          destination: coverage


  linux-clang-sanitizers:
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DSANITIZE=address,undefined,implicit-conversion,nullability -DCMAKE_CXX_CLANG_TIDY=clang-tidy
      UBSAN_OPTIONS: halt_on_error=1
    executor: linux-clang-latest
    steps:
      - install_deps
      - build_and_test
      - benchmark

  linux-gcc-sanitizers:
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DSANITIZE=address,pointer-compare,pointer-subtract,leak,undefined
      ASAN_OPTIONS: detect_invalid_pointer_pairs=2
      UBSAN_OPTIONS: halt_on_error=1
    executor: linux-gcc-latest
    steps:
      - install_deps
      - build_and_test
      - benchmark

  powerpc64:
    environment:
      BUILD_TYPE: Release
      CMAKE_OPTIONS: -DCMAKE_TOOLCHAIN_FILE=~/project/cmake/toolchains/powerpc64.cmake -DINTX_BENCHMARKING=OFF
    executor: linux-gcc-latest
    steps:
      - install_powerpc64
      - build_and_test

  arm64:
    environment:
      BUILD_TYPE: Release
    machine:
      image: ubuntu-2004:202101-01
      resource_class: arm.medium
    steps:
      - build_and_test

  no-exceptions:
    environment:
      BUILD_TYPE: Release
      CMAKE_OPTIONS: -DEXCEPTIONS=OFF -DRTTI=OFF
    executor: linux-gcc-latest
    steps:
      - install_deps
      - build_and_test
      - benchmark

  linux-32bit:
    environment:
      BUILD_TYPE: Release
      CMAKE_OPTIONS: -DCMAKE_TOOLCHAIN_FILE=~/project/cmake/toolchains/32bit.cmake -DINTX_BENCHMARKING=OFF
    docker:
      - image: ethereum/cpp-build-env:18-gcc-12-multilib
    steps:
      - build_and_test

  linux-32bit-coverage:
    environment:
      BUILD_TYPE: Coverage
      CMAKE_OPTIONS: -DCMAKE_TOOLCHAIN_FILE=~/project/cmake/toolchains/32bit.cmake -DINTX_BENCHMARKING=OFF
      TESTS_FILTER: unittests
      TESTS_EXCLUDE: random
    docker:
      - image: ethereum/cpp-build-env:18-gcc-12-multilib
    steps:
      - build_and_test
      - collect_coverage_gcc
      - upload_coverage:
          flags: 32bit

  fuzzing:
    environment:
      - BUILD_TYPE: Release
      - CMAKE_OPTIONS: -DINTX_FUZZING=ON
    executor: linux-clang-latest
    steps:
      - install_deps
      - build_and_test
      - benchmark
      - restore_cache:
          keys:
            - corpus
      - run:
          name: "Fuzzing"
          working_directory: ~/build
          command: |
            mkdir -p ~/corpus
            test/intx-fuzzer ~/corpus -use_value_profile=1 -max_len=129 -runs=100000 -jobs=4
      - save_cache:
          key: corpus-{{ epoch }}
          paths:
            - ~/corpus

  macos:
    environment:
      BUILD_TYPE: Release
    executor: macos
    steps:
      - run:
          name: "Install deps"
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake gmp
      - build_and_test
      - benchmark


  cmake-min:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - build_and_test

workflows:
  version: 2
  intx:
    jobs:
      - lint
      - build-minimal
      - linux-gcc-coverage
      - linux-clang-coverage
      - linux-clang-sanitizers
      - linux-gcc-sanitizers
      - no-exceptions
      - linux-32bit
      - linux-32bit-coverage
      - fuzzing
      - macos
      - cmake-min
      - arm64
      - powerpc64
